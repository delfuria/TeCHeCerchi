{"Name":"Estimote SDK","Id":2023,"Alias":"estimotesdk","Description":"This component binds the Estimote SDK for Android so that it may be used in Xamarin.Android projects.\n\nThis is based on Estimote SDK for Android v0.8.7.\n\nThe system requirements are Android 4.3 and Bluetooth Low Energy.\n\nThe `BeaconManager` class is the primary means of interating with Estimotes. Create an instance of this class, and use the `.Connect` method, passing it `BeaconManager.IServiceReadyCallback` object. When the BeaconManager is up and running, it will notify clients by call `BeaconManager.IServiceReadyCallback.OnServiceReady()`. At this point the client can start ranging or monitoring for the Estimotes.\n\nThe following code shows an example of how to use the `BeaconManager`.\n\n```csharp\nusing EstimoteSdk;\n\nnamespace Estimotes.Droid\n{\n    [Activity(Label = \"Notify Demo\")]\t\n    public class NotifyDemoActivity : Activity, BeaconManager.IServiceReadyCallback\n    {\n        static readonly int NOTIFICATION_ID = 123321;\n\n        BeaconManager _beaconManager;\n        Region _region;\n\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n            SetContentView(Resource.Layout.notify_demo);\n\n            _region = this.GetBeaconAndRegion().Item2;\n            _beaconManager = new BeaconManager(this);\n\n            // Default values are 5s of scanning and 25s of waiting time to save CPU cycles.\n            // In order for this demo to be more responsive and immediate we lower down those values.\n            _beaconManager.SetBackgroundScanPeriod(TimeUnit.Seconds.ToMillis(1), 0);\n            _beaconManager.EnteredRegion += (sender, e) =\u003e {\n                // Do something as the device has entered in region for the Estimote.\n            };\n            _beaconManager.ExitedRegion += (sender, e) =\u003e {\n                // Do something as the device has left the region for the Estimote.            \n            };\n        \n        }\n\n        protected override void OnResume()\n        {\n            base.OnResume();\n            _beaconManager.Connect(this);\n        }\n\n        public void OnServiceReady()\n        {\n            // This method is called when BeaconManager is up and running.\n            _beaconManager.StartMonitoring(_region);\n        }\n\n        protected override void OnDestroy()\n        {\n        \t// Make sure we disconnect from the Estimote.\n            _beaconManager.Disconnect();\n            base.OnDestroy();\n        }\n    }\n}\n\n```\n","Version":"1.1.0.0","Summary":"Estimote SDK to actively scan for Bluetooth Beacons, Nearables, and Eddystones.","QuickStart":"This component binds the Estimote SDK for Android so that it may be used in Xamarin.Android projects.\n\nThis is based on Estimote SDK for Android v0.8.7.\n\nThe system requirements are Android 4.3 and Bluetooth Low Energy.\n\n## Quick start for beacon ranging\n\nThe `BeaconManager` class is the primary means of interating with Estimotes. Create an instance of this class, and use the `.Connect` method, passing it `BeaconManager.IServiceReadyCallback` object. When the BeaconManager is up and running, it will notify clients by call `BeaconManager.IServiceReadyCallback.OnServiceReady()`. At this point the client can start ranging or monitoring for the Estimotes.\n\nThe following code shows an example of how to use the `BeaconManager`.\n\n```csharp\nusing Estimote;\n\nnamespace Estimotes.Droid\n{\n    [Activity(Label = \"Notify Demo\")]\t\n    public class NotifyDemoActivity : Activity, BeaconManager.IServiceReadyCallback\n    {\n        static readonly int NOTIFICATION_ID = 123321;\n\n        BeaconManager _beaconManager;\n        Region _region;\n\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n            SetContentView(Resource.Layout.notify_demo);\n\n            _region = this.GetBeaconAndRegion().Item2;\n            _beaconManager = new BeaconManager(this);\n\n            // Default values are 5s of scanning and 25s of waiting time to save CPU cycles.\n            // In order for this demo to be more responsive and immediate we lower down those values.\n            _beaconManager.SetBackgroundScanPeriod(TimeUnit.Seconds.ToMillis(1), 0);\n            _beaconManager.EnteredRegion += (sender, e) =\u003e {\n                // Do something as the device has entered in region for the Estimote.\n            };\n            _beaconManager.ExitedRegion += (sender, e) =\u003e {\n                // Do something as the device has left the region for the Estimote.            \n            };\n        \n        }\n\n        protected override void OnResume()\n        {\n            base.OnResume();\n            _beaconManager.Connect(this);\n        }\n\n        public void OnServiceReady()\n        {\n            // This method is called when BeaconManager is up and running.\n            _beaconManager.StartMonitoring(_region);\n        }\n\n        protected override void OnDestroy()\n        {\n        \t// Make sure we disconnect from the Estimote.\n            _beaconManager.Disconnect();\n            base.OnDestroy();\n        }\n    }\n}\n\n```\n\n## Quick start for nearable discovery\n```csharp\npublic class NearableActivity : Activity, BeaconManager.IServiceReadyCallback\n{\n\tBeaconManager beaconManager;\n    string scanId;\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n\n        // Create beacon manager\n        beaconManager = new BeaconManager(this);\n\n        // Wearables will be triggered when nearables are found\n        beaconManager.Nearable += (sender, e) =\u003e \n            {\n                ActionBar.Subtitle = string.Format(\"Found {0} nearables.\", e.Nearables.Count;\n            };\n\n        //Connect to beacon manager to start scanning\n\t   beaconManager.Connect(this);\n    }\n\n    protected override void OnStop()\n    {\n        base.OnStop();\n        if (!isScanning)\n            return;\n        \n        isScanning = false;\n        beaconManager.StopNearableDiscovery(scanId);\n    }\n\n    public void OnServiceReady()\n    {\n        isScanning = true;\n        scanId = beaconManager.StartNearableDiscovery();\n    }\n\n    protected override void OnDestroy()\n    {\n        base.OnDestroy();\n        beaconManager.Disconnect();\n    }\n}\n```\n\n## Quick start for Eddystone\n\n[Eddystone](https://developers.google.com/beacons) is an open protocol BLE protocol from Google. Estimote Beacons can broadcast the Eddystone packet.\n\nWith Estimote SDK you can:\n - find nearby Eddystone beacons \n - configure Eddystone ralated properties:\n   - URL property of `Eddystone-URL` \n   - namespace \u0026 instance properties of `Eddystone-UID` \n - configure broadcasting scheme of beacon to `Estimote Default`, `Eddystone-UID` or `Eddystone-URL`\n\nNote that you can play with Estimote Beacons broadcasting the Eddystone packet and change their configuration via [Estimote app on Google Play](https://play.google.com/store/apps/details?id=com.estimote.apps.main).\n\nIn order to start playing with Eddystone you need to update firmware of your existing Estimote beacons to `3.1.1`. Easiest way is through [Estimote app on Google Play](https://play.google.com/store/apps/details?id=com.estimote.apps.main). Than you can change broadcasting scheme on your beacon to Eddystone-URL or Eddystone-UID.\n\nFollowing code snippet shows you how you can start discovering nearby Estimote beacons broadcasting Eddystone packet:\n\n```csharp\npublic class NearableActivity : Activity, BeaconManager.IServiceReadyCallback\n{\n    BeaconManager beaconManager;\n    string scanId;\n    protected override void OnCreate(Bundle savedInstanceState)\n    {\n        base.OnCreate(savedInstanceState);\n\n        // Create beacon manager\n        beaconManager = new BeaconManager(this);\n\n        // Wearables will be triggered when nearables are found\n        beaconManager.Eddystone += (sender, e) =\u003e \n            {\n                ActionBar.Subtitle = string.Format(\"Found {0} eddystones.\", e.Eddystones.Count;\n            };\n\n        //Connect to beacon manager to start scanning\n       beaconManager.Connect(this);\n    }\n\n    protected override void OnStop()\n    {\n        base.OnStop();\n        if (!isScanning)\n            return;\n        \n        isScanning = false;\n        beaconManager.StopEddystoneScanning(scanId);\n    }\n\n    public void OnServiceReady()\n    {\n        isScanning = true;\n        scanId = beaconManager.StartEddystoneScanning();\n    }\n\n    protected override void OnDestroy()\n    {\n        base.OnDestroy();\n        beaconManager.Disconnect();\n    }\n}\n\n```\n\n","Hash":"ddbbe67e4a777917c7116c16c2e5d6f8","TargetPlatforms":["android"],"TrialHash":null}